package org.acme.insurance.policyquote.wih;

import java.util.Collection;

import org.drools.compiler.kproject.ReleaseIdImpl;
import org.kie.api.KieBase;
import org.kie.api.KieServices;
import org.kie.api.builder.KieScanner;
import org.kie.api.builder.ReleaseId;
import org.kie.api.definition.KiePackage;
import org.kie.api.definition.rule.Rule;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;
import org.kie.api.runtime.process.WorkItem;
import org.kie.api.runtime.process.WorkItemHandler;
import org.kie.api.runtime.process.WorkItemManager;
import org.kie.internal.runtime.Cacheable;
import org.kie.api.runtime.process.ProcessInstance;

public class RulesWorkItemHandler implements WorkItemHandler, Cacheable {
    
    private ReleaseId releaseId;
    private KieContainer kieContainer;
    private KieScanner kieScanner;
    
    public RulesWorkItemHandler(String releaseIdStr) {
        releaseId = new ReleaseIdImpl(releaseIdStr);
        KieServices ks = KieServices.Factory.get();
        kieContainer = ks.newKieContainer(releaseId);

        // Iterate and print list of rules loaded in KieBase
        Collection<KiePackage> kPackages = kieContainer.getKieBase().getKiePackages();
        for(KiePackage kPackage : kPackages) {
            Collection<Rule> rules = kPackage.getRules();
            for(Rule rule : rules) {
                System.out.println(kPackage.getName()+" : Following rule found: "+rule.getName());
            }
        }

        kieScanner = ks.newKieScanner(kieContainer);
        kieScanner.start(10000L);
    }

    @Override
    public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {
        
        String kieSessionName = (String)workItem.getParameter("kieSession");
        String processId = (String)workItem.getParameter("processId");

        StringBuilder sBuilder = new StringBuilder("executeWorkItem() \n\tExecuting rules for releaseId " + releaseId);
        sBuilder.append("\n\tkieSessionName = "+kieSessionName);
        sBuilder.append("\n\tprocessId = "+processId);
        System.out.println(sBuilder.toString()); 

        KieSession kieSession;
        if (kieSessionName == null || kieSessionName.isEmpty()) {
            kieSession = kieContainer.newKieSession();
        } else {
            kieSession = kieContainer.newKieSession(kieSessionName);
        }
        
        for (String param : workItem.getParameters().keySet()) {
            if (param.startsWith("fact_")) {
                kieSession.insert(workItem.getParameter(param));
            }
        }
        if (processId != null && !processId.isEmpty()) {
            ProcessInstance pInstance = kieSession.startProcess(processId);
            if(pInstance == null)
                throw new RuntimeException("executeWorkItem() pInstance not created with processId = "+processId);
        }

        int numRulesFired = kieSession.fireAllRules();
        System.out.println("\nNumber of rules fired = "+numRulesFired);

        kieSession.dispose();
        manager.completeWorkItem(workItem.getId(), workItem.getParameters());         
    }

    @Override
    public void abortWorkItem(WorkItem workItem, WorkItemManager manager) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void close() {
        kieScanner.stop(); 
        
    }

}
